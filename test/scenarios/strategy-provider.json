{
  "title": "StrategyProvider",
  "description": "Test cases for checking Functions' Visibility of StrategyProvider contract",
  "stories": [
    {
      "description": "[SetBestStrategy] - StrategyOperator should be able to set best strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1"
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "getRpToTokenToBestStrategy(uint256,bytes32)",
          "args": {
            "riskProfileCode": "1"
          },
          "expectedValue": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[SetBestStrategy] - Should receive an new strategy after setting strategy more than one",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1"
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1",
            "isSecond": true
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "getRpToTokenToBestStrategy(uint256,bytes32)",
          "args": {
            "riskProfileCode": "1",
            "isSecond": true
          },
          "expectedValue": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[SetBestStrategy] - StrategyOperator should be able to set an empty strategy ",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1",
            "isEmpty": true
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "getRpToTokenToBestStrategy(uint256,bytes32)",
          "args": {
            "riskProfileCode": "1",
            "isEmpty": true
          },
          "expectedValue": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[SetBestStrategy] - Non-StrategyOperator shouldn't be able to set best strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[SetBestStrategy] - Old StrategyOperator shouldn't be able to set best strategy",
      "setActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1"
          },
          "executor": "strategyOperator",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[setBestDefaultStrategy] - StrategyOperator should be able to set best default strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1"
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "getRpToTokenToDefaultStrategy(uint256,bytes32)",
          "args": {
            "riskProfileCode": "1"
          },
          "expectedValue": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[setBestDefaultStrategy] - Should receive an new strategy after setting strategy more than one",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1"
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1",
            "isSecond": true
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "getRpToTokenToDefaultStrategy(uint256,bytes32)",
          "args": {
            "riskProfileCode": "1",
            "isSecond": true
          },
          "expectedValue": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[setBestDefaultStrategy] - StrategyOperator should be able to set an empty strategy ",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1",
            "isEmpty": true
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "getRpToTokenToDefaultStrategy(uint256,bytes32)",
          "args": {
            "riskProfileCode": "1",
            "isEmpty": true
          },
          "expectedValue": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[setBestDefaultStrategy] - Non-StrategyOperator shouldn't be able to set best default strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[setBestDefaultStrategy] - Old StrategyOperator shouldn't be able to set best default strategy",
      "setActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(uint256,bytes32,(address,address,bool)[])",
          "args": {
            "riskProfileCode": "1"
          },
          "executor": "strategyOperator",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[setVaultRewardStrategy] - StrategyOperator should be able to set best Vault Reward strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
          "args": {
            "vaultRewardStrategy": [5000, 5000]
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "vaultRewardTokenHashToVaultRewardTokenStrategy(bytes32)",
          "args": {},
          "expectedValue": {
            "vaultRewardStrategy": [5000, 5000]
          }
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[setVaultRewardStrategy] - Non-StrategyOperator shouldn't be able to set best Vault Reward strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
          "args": {
            "vaultRewardStrategy": [5000, 5000]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[setVaultRewardStrategy] - Old StrategyOperator shouldn't be able to set best Vault Reward strategy",
      "setActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
          "args": {
            "vaultRewardStrategy": [5000, 5000]
          },
          "executor": "strategyOperator",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[setVaultRewardStrategy] - Cannot set best Vault Reward strategy with non-exist reward token",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
          "args": {
            "vaultRewardStrategy": [5000, 5000],
            "isNonApprovedToken": true
          },
          "executor": "strategyOperator",
          "expect": "fail",
          "message": "!VaultRewardTokenHashExists"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[setVaultRewardStrategy] - Cannot set best Vault Reward strategy with unqualified vaultRewardStrategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
          "args": {
            "vaultRewardStrategy": [1000, 1000]
          },
          "executor": "strategyOperator",
          "expect": "fail",
          "message": "!HoldConvertBasisRange"
        }
      ],
      "getActions": [],
      "cleanActions": []
    }
  ]
}
