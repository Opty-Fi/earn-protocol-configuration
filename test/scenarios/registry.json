{
  "title": "Registry",
  "description": "Test cases for Registry contract",
  "stories": [
    {
      "description": "Governance should be able to set FinanceOperator's address",
      "setActions": [
        {
          "action": "setFinanceOperator(address)",
          "args": {
            "newFinanceOperator": "financeOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "financeOperator()",
          "args": {},
          "expectedValue": {
            "addressName": "financeOperator"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set FinanceOperator's address",
      "setActions": [
        {
          "action": "setFinanceOperator(address)",
          "args": {
            "newFinanceOperator": "financeOperator"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Governance should be able to set StrategyOperator's address",
      "setActions": [
        {
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "strategyOperator()",
          "args": {},
          "expectedValue": {
            "addressName": "strategyOperator"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set StrategyOperator's address",
      "setActions": [
        {
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Governance should be able to set RiskOperator's address",
      "setActions": [
        {
          "action": "setRiskOperator(address)",
          "args": {
            "newRiskOperator": "riskOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "riskOperator()",
          "args": {},
          "expectedValue": {
            "addressName": "riskOperator"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set RiskOperator's address",
      "setActions": [
        {
          "action": "setRiskOperator(address)",
          "args": {
            "newRiskOperator": "riskOperator"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Governance should be able to set Operator's address",
      "setActions": [
        {
          "action": "setOperator(address)",
          "args": {
            "newOperator": "operator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getOperator()",
          "args": {},
          "expectedValue": {
            "addressName": "operator"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set Operator's address",
      "setActions": [
        {
          "action": "setOperator(address)",
          "args": {
            "newOperator": "operator"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Governance should be able to set Treasury's address",
      "setActions": [
        {
          "action": "setTreasury(address)",
          "args": {
            "contractName": "treasury"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "treasury()",
          "args": {},
          "expectedValue": {
            "contractName": "treasury"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set Treasury's address",
      "setActions": [
        {
          "action": "setTreasury(address)",
          "args": {
            "contractName": "treasury"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set StrategyProvider Contract address",
      "setActions": [
        {
          "action": "setStrategyProvider(address)",
          "args": {
            "contractName": "strategyProvider"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getStrategyProvider()",
          "args": {},
          "expectedValue": {
            "contractName": "strategyProvider"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set StrategyProvider Contract address",
      "setActions": [
        {
          "action": "setStrategyProvider(address)",
          "args": {
            "contractName": "strategyProvider"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator shouldn't be able to set StrategyProvider Contract address with wrong registry address",
      "setActions": [
        {
          "action": "setStrategyProvider(address)",
          "args": {
            "contractName": "dummyContract"
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!registryContract"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set RiskManager Contract address",
      "setActions": [
        {
          "action": "setRiskManager(address)",
          "args": {
            "contractName": "riskManager"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getRiskManager()",
          "args": {},
          "expectedValue": {
            "contractName": "riskManager"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set RiskManager Contract address",
      "setActions": [
        {
          "action": "setRiskManager(address)",
          "args": {
            "contractName": "riskManager"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator shouldn't be able to set RiskManager Contract address with wrong registry address",
      "setActions": [
        {
          "action": "setRiskManager(address)",
          "args": {
            "contractName": "dummyContract"
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!registryContract"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set HarvestCodeProvider Contract address",
      "setActions": [
        {
          "action": "setHarvestCodeProvider(address)",
          "args": {
            "contractName": "harvestCodeProvider"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getHarvestCodeProvider()",
          "args": {},
          "expectedValue": {
            "contractName": "harvestCodeProvider"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set HarvestCodeProvider Contract address",
      "setActions": [
        {
          "action": "setHarvestCodeProvider(address)",
          "args": {
            "contractName": "harvestCodeProvider"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator shouldn't be able to set HarvestCodeProvider Contract address with wrong registry address",
      "setActions": [
        {
          "action": "setHarvestCodeProvider(address)",
          "args": {
            "contractName": "dummyContract"
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!registryContract"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set OPTY Contract address",
      "setActions": [
        {
          "action": "setOPTY(address)",
          "args": {
            "contractName": "opty"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "opty()",
          "args": {},
          "expectedValue": {
            "contractName": "opty"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set OPTY Contract address",
      "setActions": [
        {
          "action": "setOPTY(address)",
          "args": {
            "contractName": "opty"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set ODEFIVaultBooster Contract address",
      "setActions": [
        {
          "action": "setODEFIVaultBooster(address)",
          "args": {
            "contractName": "odefiVaultBooster"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getODEFIVaultBooster()",
          "args": {},
          "expectedValue": {
            "contractName": "odefiVaultBooster"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set ODEFIVaultBooster Contract address",
      "setActions": [
        {
          "action": "setODEFIVaultBooster(address)",
          "args": {
            "contractName": "odefiVaultBooster"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator shouldn't be able to set ODEFIVaultBooster Contract address with wrong registry address",
      "setActions": [
        {
          "action": "setODEFIVaultBooster(address)",
          "args": {
            "contractName": "dummyContract"
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!registryContract"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve a token",
      "setActions": [
        {
          "action": "approveToken(address)",
          "args": {
            "tokens": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "tokens(address)",
          "args": {
            "address": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "expectedValue": true,
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeToken(address)",
          "args": {
            "tokens": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator should be able to approve a list of tokens",
      "setActions": [
        {
          "action": "approveToken(address[])",
          "args": {
            "tokens": [
              "0x6b175474e89094c44da98b954eedeac495271d0f",
              "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "0xdac17f958d2ee523a2206206994597c13d831ec7"
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "tokens(address)",
          "args": {
            "address": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "expectedValue": true,
          "expectedMultiValues": {}
        },
        {
          "action": "tokens(address)",
          "args": {
            "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
          },
          "expectedValue": true,
          "expectedMultiValues": {}
        },
        {
          "action": "tokens(address)",
          "args": {
            "address": "0xdac17f958d2ee523a2206206994597c13d831ec7"
          },
          "expectedValue": true,
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeToken(address[])",
          "args": {
            "tokens": [
              "0x6b175474e89094c44da98b954eedeac495271d0f",
              "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "0xdac17f958d2ee523a2206206994597c13d831ec7"
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator should be able to approve a liquidity pool",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to approve a liquidity pool",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve a list of liquidity pools",
      "setActions": [
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        },
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "RiskOperator should be able to rate a liquidity pool",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [2, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 0]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-RiskOperator shouldn't be able to rate a liquidity pool",
      "setActions": [
        {
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Risk Operator should be able to rate a list of liquidity pools",
      "setActions": [
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "rateLiquidityPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 3]
            ]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [2, true],
          "expectedMultiValues": {}
        },
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [3, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "rateLiquidityPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 0],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 0]
            ]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-RiskOperator shouldn't be able to rate a list of liquidity pools",
      "setActions": [
        {
          "action": "rateLiquidityPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 3]
            ]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Risk Operator shouldn't be able to rate non-approved liquidity pools",
      "setActions": [
        {
          "action": "rateLiquidityPool((address,uint8)[])",
          "args": {
            "lqRate": [["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "!liquidityPools"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to revoke a liquidity pool",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to revoke a list of liquidity pools",
      "setActions": [
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        },
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to revoke a liquidity pool",
      "setActions": [
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to revoke a list of liquidity pools",
      "setActions": [
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve a credit pool",
      "setActions": [
        {
          "action": "approveCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator should be able to approve a list of credit pools",
      "setActions": [
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        },
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to approve a credit pool",
      "setActions": [
        {
          "action": "approveCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to approve a list of credit pools",
      "setActions": [
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to rate a credit pool",
      "setActions": [
        {
          "action": "approveCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "rateCreditPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [2, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "rateCreditPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 0]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "RiskOperator should be able to rate a list of credit pools",
      "setActions": [
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "rateCreditPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 3]
            ]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [2, true],
          "expectedMultiValues": {}
        },
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [3, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "rateCreditPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 0],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 0]
            ]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-RiskOperator shouldn't be able to rate a credit pool",
      "setActions": [
        {
          "action": "rateCreditPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator shouldn't be able to rate a list of credit pools",
      "setActions": [
        {
          "action": "rateCreditPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 3]
            ]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to rate non-approved liquidity pools",
      "setActions": [
        {
          "action": "rateCreditPool((address,uint8)[])",
          "args": {
            "lqRate": [["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "!creditPools"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to revoke a credit pool",
      "setActions": [
        {
          "action": "approveCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to revoke a list of credit pools",
      "setActions": [
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        },
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set liquidity pool to adapter",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setLiquidityPoolToAdapter(address,address)",
          "args": {
            "lqs": {
              "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
              "adapterName": "CompoundAdapter"
            }
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPoolToAdapter(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedMultiValues": {},
          "expectedValue": "CompoundAdapter"
        }
      ],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to set liquidity pool to adapter",
      "setActions": [
        {
          "action": "setLiquidityPoolToAdapter(address,address)",
          "args": {
            "lqs": {
              "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
              "adapterName": "CompoundAdapter"
            }
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator shouldn't be able to set liquidity pool to adapter with wrong registry contract",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setLiquidityPoolToAdapter(address,address)",
          "args": {
            "lqs": {
              "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
              "adapterName": "dummyContract"
            }
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!registryContract"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator should be able to set multiple liquidity pools to adapters",
      "setActions": [
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setLiquidityPoolToAdapter((address,address)[])",
          "args": {
            "lqs": [
              {
                "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "adapterName": "CompoundAdapter"
              },
              {
                "liquidityPool": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "adapterName": "AaveV1Adapter"
              }
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPoolToAdapter(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedMultiValues": {},
          "expectedValue": "CompoundAdapter"
        },
        {
          "action": "liquidityPoolToAdapter(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedMultiValues": {},
          "expectedValue": "AaveV1Adapter"
        }
      ],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator shouldn't be able to set mutiple non-approved liquidity pools to adapters",
      "setActions": [
        {
          "action": "setLiquidityPoolToAdapter((address,address)[])",
          "args": {
            "lqs": [
              {
                "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "adapterName": "CompoundAdapter"
              },
              {
                "liquidityPool": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "adapterName": "AaveV1Adapter"
              }
            ]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!liquidityPools"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set multiple liquidity pools to adapters",
      "setActions": [
        {
          "action": "setLiquidityPoolToAdapter((address,address)[])",
          "args": {
            "lqs": [
              {
                "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "adapterName": "CompoundAdapter"
              },
              {
                "liquidityPool": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "adapterName": "AaveV1Adapter"
              }
            ]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve and set liquidity pool to adapter",
      "setActions": [
        {
          "action": "approveLiquidityPoolAndMapToAdapter(address,address)",
          "args": {
            "lqs": {
              "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
              "adapterName": "CompoundAdapter"
            }
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPoolToAdapter(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedMultiValues": {},
          "expectedValue": "CompoundAdapter"
        }
      ],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to approve and set liquidity pool to adapter",
      "setActions": [
        {
          "action": "approveLiquidityPoolAndMapToAdapter(address,address)",
          "args": {
            "lqs": {
              "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
              "adapterName": "CompoundAdapter"
            }
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve and set multiple liquidity pools to adapters",
      "setActions": [
        {
          "action": "approveLiquidityPoolAndMapToAdapter((address,address)[])",
          "args": {
            "lqs": [
              {
                "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "adapterName": "CompoundAdapter"
              },
              {
                "liquidityPool": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "adapterName": "AaveV1Adapter"
              }
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPoolToAdapter(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedMultiValues": {},
          "expectedValue": "CompoundAdapter"
        },
        {
          "action": "liquidityPoolToAdapter(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedMultiValues": {},
          "expectedValue": "AaveV1Adapter"
        }
      ],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to approve and set multiple liquidity pools to adapters",
      "setActions": [
        {
          "action": "approveLiquidityPoolAndMapToAdapter((address,address)[])",
          "args": {
            "lqs": [
              {
                "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "adapterName": "CompoundAdapter"
              },
              {
                "liquidityPool": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "adapterName": "AaveV1Adapter"
              }
            ]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set token hash to token",
      "setActions": [
        {
          "action": "approveToken(address)",
          "args": {
            "tokens": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setTokensHashToTokens(bytes32,address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f"],
            "chainId": "0x1"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "tokensHashIndexes(uint256)",
          "args": {
            "index": "0"
          },
          "expectedValue": "0x0b16da4cd290fb0e4a2c068617d40e90b07e324269ead8af64ba45a1f7e51ce5",
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeToken(address)",
          "args": {
            "tokens": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator should be able to set token hash to multiple tokens",
      "setActions": [
        {
          "action": "approveToken(address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setTokensHashToTokens((bytes32,address[])[])",
          "args": {
            "tokensDetails": [
              {
                "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"],
                "chainId": "0x1"
              },
              {
                "tokens": ["0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "0x6b175474e89094c44da98b954eedeac495271d0f"],
                "chainId": "0x1"
              }
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "tokensHashIndexes(uint256)",
          "args": {
            "index": "1"
          },
          "expectedValue": "0x77e753419fe23f081a75e587ac6e3c47a4a6fc3b1f4e2a8afb6d5b8d4758899f",
          "expectedMultiValues": {}
        },
        {
          "action": "tokensHashIndexes(uint256)",
          "args": {
            "index": "2"
          },
          "expectedValue": "0x21714a142cab8da61321e594e56928f3cc68121adac597fa1c9786d958d8e3cc",
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeToken(address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator shouldn't be able to set existing token hash to tokens",
      "setActions": [
        {
          "action": "approveToken(address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setTokensHashToTokens((bytes32,address[])[])",
          "args": {
            "tokensDetails": [
              {
                "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f"],
                "chainId": "0x1"
              },
              {
                "tokens": ["0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"],
                "chainId": "0x1"
              }
            ]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!_isNewTokensHash"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "action": "revokeToken(address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator shouldn't be able to set token hash to non-approved tokens",
      "setActions": [
        {
          "action": "setTokensHashToTokens((bytes32,address[])[])",
          "args": {
            "tokensDetails": [
              {
                "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f"],
                "chainId": "0x1"
              },
              {
                "tokens": ["0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"],
                "chainId": "0x1"
              }
            ]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!tokens"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve token and set token hash to token",
      "setActions": [
        {
          "action": "approveTokenAndMapToTokensHash(bytes32,address[])",
          "args": {
            "tokens": ["0x0000000000085d4780B73119b644AE5ecd22b376"],
            "chainId": "0x1"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "tokensHashIndexes(uint256)",
          "args": {
            "index": "3"
          },
          "expectedValue": "0x9ea363fe8708062133adc34af93e7c155bb6aa0be8feba7b69584593df1d7fc9",
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeToken(address)",
          "args": {
            "tokens": "0x0000000000085d4780B73119b644AE5ecd22b376"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to approve token and set token hash to token",
      "setActions": [
        {
          "action": "approveTokenAndMapToTokensHash(bytes32,address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f"],
            "chainId": "0x1"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator shouldn't be able to approve token and set existing token hash to token",
      "setActions": [
        {
          "action": "approveTokenAndMapToTokensHash(bytes32,address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f"],
            "chainId": "0x1"
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!_isNewTokensHash"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve multiple tokens and set tokens hashes to tokens",
      "setActions": [
        {
          "action": "approveTokenAndMapToTokensHash((bytes32,address[])[])",
          "args": {
            "details": [
              { "tokens": ["0x57Ab1ec28D129707052df4dF418D58a2D46d5f51"], "chainId": "0x1" },
              { "tokens": ["0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd"], "chainId": "0x1" }
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "tokensHashIndexes(uint256)",
          "args": {
            "index": "4"
          },
          "expectedValue": "0xa7cd058980e5c1dda2cb8db53d871ae39b7147f42930d2ebb06c635c036283fc",
          "expectedMultiValues": {}
        },
        {
          "action": "tokensHashIndexes(uint256)",
          "args": {
            "index": "5"
          },
          "expectedValue": "0x844665d5334c473b2cb5a4af49d954ccd9ec152fc32a0ecc9e45938560ba807a",
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeToken(address)",
          "args": {
            "tokens": "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeToken(address)",
          "args": {
            "tokens": "0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to approve multiple tokens and set tokens hashes to tokens",
      "setActions": [
        {
          "action": "approveTokenAndMapToTokensHash((bytes32,address[])[])",
          "args": {
            "details": [
              { "tokens": ["0x57Ab1ec28D129707052df4dF418D58a2D46d5f51"], "chainId": "0x1" },
              { "tokens": ["0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd"], "chainId": "0x1" }
            ]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator shouldn't be able to approve multiple tokens and set existing tokens hashes to tokens",
      "setActions": [
        {
          "action": "approveTokenAndMapToTokensHash((bytes32,address[])[])",
          "args": {
            "details": [
              { "tokens": ["0x57Ab1ec28D129707052df4dF418D58a2D46d5f51"], "chainId": "0x1" },
              { "tokens": ["0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd"], "chainId": "0x1" }
            ]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!_isNewTokensHash"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to add a Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "1",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getRiskProfile(uint256)",
          "args": {
            "riskProfileCode": "1"
          },
          "expectedMultiValues": {
            "canBorrow": false,
            "lowerLimit": 0,
            "upperLimit": 10,
            "exists": true
          },
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to add a Risk Profile with an empty symbol",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "emptySymbol",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "RP_symbol_empty"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to add a Risk Profile with an empty name",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "emptyName",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "RP_name_empty"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to add the existing Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "2",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "2",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "RP_already_exists"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator shouldn't be able to add a Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "1",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to update borrow for Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "3",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "updateRiskProfileBorrow(uint256,bool)",
          "args": {
            "riskProfileCode": "3",
            "canBorrow": true
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getRiskProfile(uint256)",
          "args": {
            "riskProfileCode": "3"
          },
          "expectedMultiValues": {
            "canBorrow": true,
            "lowerLimit": 0,
            "upperLimit": 10,
            "exists": true
          },
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator shouldn't be able to update borrow for Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "4",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "updateRiskProfileBorrow(uint256,bool)",
          "args": {
            "riskProfileCode": "4",
            "canBorrow": true
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to update borrow for non-existing Risk Profile",
      "setActions": [
        {
          "action": "updateRiskProfileBorrow(uint256,bool)",
          "args": {
            "riskProfileCode": "10000",
            "canBorrow": true
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "!Rp_Exists"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to update pool ratings for Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "5",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "updateRPPoolRatings(uint256,(uint8,uint8))",
          "args": {
            "riskProfileCode": "5",
            "poolRatingRange": [0, 20]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getRiskProfile(uint256)",
          "args": {
            "riskProfileCode": "5"
          },
          "expectedMultiValues": {
            "canBorrow": false,
            "lowerLimit": 0,
            "upperLimit": 20,
            "exists": true
          },
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator shouldn't be able to update pool ratings for Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "6",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "updateRPPoolRatings(uint256,(uint8,uint8))",
          "args": {
            "riskProfileCode": "6",
            "poolRatingRange": [0, 20]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to update pool ratings for non-existing Risk Profile",
      "setActions": [
        {
          "action": "updateRPPoolRatings(uint256,(uint8,uint8))",
          "args": {
            "riskProfileCode": "100000",
            "poolRatingRange": [0, 20]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "!Rp_Exists"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to remove the Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "7",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "removeRiskProfile(uint256)",
          "args": {
            "riskProfileCode": "7"
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getRiskProfile(uint256)",
          "args": {
            "riskProfileCode": "7"
          },
          "expectedMultiValues": {
            "canBorrow": false,
            "lowerLimit": null,
            "upperLimit": null,
            "exists": false
          },
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to remove the Risk Profile from invalid index",
      "setActions": [
        {
          "action": "removeRiskProfile(uint256)",
          "args": {
            "index": 100
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "Invalid_Rp_index"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator should be able to remove the Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(uint256,string,string,bool,(uint8,uint8))",
          "args": {
            "riskProfileCode": "8",
            "canBorrow": false,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "removeRiskProfile(uint256)",
          "args": {
            "riskProfileCode": "8"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to set a multiple Risk Profiles",
      "setActions": [
        {
          "action": "addRiskProfile(uint256[],string[],string[],bool[],(uint8,uint8)[])",
          "args": {
            "riskProfileCode": ["9", "10", "11"],
            "canBorrow": [false, true, true],
            "poolRatingsRange": [
              [0, 20],
              [0, 40],
              [0, 60]
            ]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getRiskProfile(uint256)",
          "args": {
            "riskProfileCode": "9"
          },
          "expectedMultiValues": {
            "canBorrow": false,
            "lowerLimit": 0,
            "upperLimit": 20,
            "exists": true
          },
          "expectedValue": ""
        },
        {
          "action": "getRiskProfile(uint256)",
          "args": {
            "riskProfileCode": "10"
          },
          "expectedMultiValues": {
            "canBorrow": true,
            "lowerLimit": 0,
            "upperLimit": 40,
            "exists": true
          },
          "expectedValue": ""
        },
        {
          "action": "getRiskProfile(uint256)",
          "args": {
            "riskProfileCode": "11"
          },
          "expectedMultiValues": {
            "canBorrow": true,
            "lowerLimit": 0,
            "upperLimit": 60,
            "exists": true
          },
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator shouldn't be able to set a multiple Risk Profiles",
      "setActions": [
        {
          "action": "addRiskProfile(uint256[],string[],string[],bool[],(uint8,uint8)[])",
          "args": {
            "riskProfileCode": ["1", "2", "3"],
            "canBorrow": [false, true, true],
            "poolRatingsRange": [
              [0, 20],
              [0, 40],
              [0, 60]
            ]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Old-RiskOperator shouldn't be able to execute function allowing only riskOperator",
      "setActions": [
        {
          "action": "setRiskOperator(address)",
          "args": {
            "newRiskOperator": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "action": "addRiskProfile(uint256[],string[],string[],bool[],(uint8,uint8)[])",
          "args": {
            "riskProfileCode": ["1", "2", "3"],
            "canBorrow": [false, true, true],
            "poolRatingsRange": [
              [0, 20],
              [0, 40],
              [0, 60]
            ]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "action": "setRiskOperator(address)",
          "args": {
            "newRiskOperator": "riskOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[Upgradability] Should be able to use functions and variables in new contracts and maintains old variable states",
      "setActions": [
        {
          "action": "initData()",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "action": "become(address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "isNewContract()",
          "args": {},
          "expectedValue": true,
          "expectedMultiValues": {}
        },
        {
          "action": "verifyOldValue()",
          "args": {},
          "expectedValue": "",
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    }
  ]
}
