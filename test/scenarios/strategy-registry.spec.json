{
  "title": "StrategyRegistry",
  "description": "Test cases for StrategyRegistry contract",
  "stories": [
    {
      "description": "Operator should be able to add strategy",
      "setActions": [
        {
          "action": "addStrategy(bytes32,(address,address,bool)[],((bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256)))",
          "args": {},
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "action": "addStrategy(bytes32,(address,address,bool)[],((bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256)))",
          "args": {},
          "executer": "owner",
          "expect": "fail",
          "message": "isNewStrategy"
        }
      ],
      "getActions": [
        {
          "action": "getStrategySteps(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getOraValueUTPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getOraValueLPPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getLastStepBalanceLPPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getDepositSomeToStrategyPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getDepositAllToStrategyPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getWithdrawSomeFromStrategyPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getWithdrawAllFromStrategyPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getClaimRewardsPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to delete strategy",
      "setActions": [
        {
          "action": "deleteStrategy(bytes32)",
          "args": {},
          "executer": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        },
        {
          "action": "deleteStrategies(bytes32[])",
          "args": {},
          "executer": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to add strategy",
      "setActions": [
        {
          "action": "addStrategy(bytes32,(address,address,bool)[],((bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256)))",
          "args": {},
          "executer": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        },
        {
          "action": "addStrategies(bytes32[],(address,address,bool)[][],((bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256))[])",
          "args": {},
          "executer": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": []
    },
    {
      "description": "Operator cannot set multiple strategies where length mismatch",
      "setActions": [
        {
          "action": "addStrategies(bytes32[],(address,address,bool)[][],((bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256))[])",
          "args": {
            "mismatchLength": true
          },
          "executer": "owner",
          "expect": "fail",
          "message": "length mismatch"
        }
      ],
      "getActions": []
    },
    {
      "description": "Operator can delete a strategy",
      "setActions": [
        {
          "action": "deleteStrategy(bytes32)",
          "args": {},
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": []
    },
    {
      "description": "Operator can set multiple strategies",
      "setActions": [
        {
          "action": "addStrategies(bytes32[],(address,address,bool)[][],((bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256),(bytes32[],bytes[],uint256))[])",
          "args": {},
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getStrategySteps(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getOraValueUTPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getOraValueLPPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getLastStepBalanceLPPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getDepositSomeToStrategyPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getDepositAllToStrategyPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getWithdrawSomeFromStrategyPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getWithdrawAllFromStrategyPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        },
        {
          "action": "getClaimRewardsPlan(bytes32)",
          "args": {},
          "expectedValue": {}
        }
      ]
    },
    {
      "description": "Operator can delete multiple strategies",
      "setActions": [
        {
          "action": "deleteStrategies(bytes32[])",
          "args": {},
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": []
    }
  ]
}
