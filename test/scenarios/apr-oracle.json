{
  "title": "APROracle",
  "description": "Test cases for APROracle integration in RiskManager and StrategyProvider",
  "usedTokens": ["DAI", "WETH", "MKR", "USDC", "USDT", "TUSD", "WBTC", "DX"],
  "usedStrategies": [
    {
      "adapterName": "CompoundAdapter",
      "token": "DAI"
    },
    {
      "adapterName": "AaveV1Adapter",
      "token": "DAI"
    },
    {
      "adapterName": "AaveV2Adapter",
      "token": "DAI"
    },
    {
      "adapterName": "HarvestV1Adapter",
      "token": "DAI"
    }
  ],
  "stories": [
    {
      "description": "getBestStrategy should return 0x00 strategy by default if the default strategy state is CompoundOrAave but Compound and Aave's strategies are not set",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 1
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DAI"
          },
          "expectedValue": null
        }
      ],
      "cleanActions": []
    },
    {
      "description": "getBestStrategy should return 0x00 strategy by default if the token is not supported by Aave or Compound and the default strategy state is CompoundOrAave",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 1
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DX"
          },
          "expectedValue": null
        }
      ],
      "cleanActions": []
    },
    {
      "description": "getBestStrategy should return by default 0x00 strategy if Compound and Aave's strategies are set but the default strategy state is Zero",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 0
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "CompoundAdapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV2Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DAI"
          },
          "expectedValue": null
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "liquidityPools": [
              {
                "adapterName": "CompoundAdapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV1Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV2Adapter",
                "token": "DAI"
              }
            ]
          }
        }
      ]
    },
    {
      "description": "getBestStrategy should return by default the strategy with the highest APR if Compound and Aave's strategies are set and the default strategy state is CompoundOrAave",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 1
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "CompoundAdapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV2Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DAI"
          },
          "expectedValue": {
            "adapterName": "",
            "token": ""
          }
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "liquidityPools": [
              {
                "adapterName": "CompoundAdapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV1Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV2Adapter",
                "token": "DAI"
              }
            ]
          }
        }
      ]
    },
    {
      "description": "getBestStrategy should return the default strategy (Aave or Compound) if strategy is not qualified (liquidityPool is not approved) and the default strategy state is CompoundOrAave",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 1
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "CompoundAdapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV2Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(uint256,bytes32,bytes32)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "riskProfileCode": "1"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DAI"
          },
          "expectedValue": {
            "adapterName": "",
            "token": ""
          }
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "liquidityPools": [
              {
                "adapterName": "CompoundAdapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV1Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV2Adapter",
                "token": "DAI"
              }
            ]
          }
        }
      ]
    },
    {
      "description": "getBestStrategy should return the default strategy (Aave or Compound) if strategy is not qualified (rate is not in expected range) and the default strategy state is CompoundOrAave",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 1
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "updateRPPoolRatings(uint256,(uint8,uint8))",
          "args": {
            "riskProfileCode": "1",
            "poolRatingRange": [2, 10]
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "CompoundAdapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV2Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "score": 0
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(uint256,bytes32,bytes32)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "riskProfileCode": "1"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DAI"
          },
          "expectedValue": {
            "adapterName": "",
            "token": ""
          }
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "liquidityPools": [
              {
                "adapterName": "CompoundAdapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV1Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV2Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "HarvestV1Adapter",
                "token": "DAI"
              }
            ]
          }
        }
      ]
    },
    {
      "description": "getBestStrategy should return the best strategy and not the default one if strategy is qualified and even if the default strategy state is CompoundOrAave",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 1
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "updateRPPoolRatings(uint256,(uint8,uint8))",
          "args": {
            "riskProfileCode": "1",
            "poolRatingRange": [0, 10]
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "CompoundAdapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV2Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "score": 1
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(uint256,bytes32,bytes32)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "riskProfileCode": "1"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DAI"
          },
          "expectedValue": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI"
          }
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "liquidityPools": [
              {
                "adapterName": "CompoundAdapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV1Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV2Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "HarvestV1Adapter",
                "token": "DAI"
              }
            ]
          }
        }
      ]
    },
    {
      "description": "getBestStrategy should return the best strategy and not the default one if strategy is qualified and even if the default strategy state is Zero",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 0
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "updateRPPoolRatings(uint256,(uint8,uint8))",
          "args": {
            "riskProfileCode": "1",
            "poolRatingRange": [0, 10]
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "CompoundAdapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV2Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "score": 1
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(uint256,bytes32,bytes32)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "riskProfileCode": "1"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DAI"
          },
          "expectedValue": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI"
          }
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "liquidityPools": [
              {
                "adapterName": "CompoundAdapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV1Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV2Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "HarvestV1Adapter",
                "token": "DAI"
              }
            ]
          }
        }
      ]
    },
    {
      "description": "getBestStrategy should return the best default strategy and not the Compound or Aave one if the default strategy state is Zero",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 0
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "CompoundAdapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV2Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "score": 1
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(uint256,bytes32,bytes32)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "riskProfileCode": "1"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DAI"
          },
          "expectedValue": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI"
          }
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "liquidityPools": [
              {
                "adapterName": "CompoundAdapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV1Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV2Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "HarvestV1Adapter",
                "token": "DAI"
              }
            ]
          }
        }
      ]
    },
    {
      "description": "getBestStrategy should return the best default strategy and not the Compound or Aave one if the default strategy state is CompoundOrAave",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 1
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "CompoundAdapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV2Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "score": 1
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(uint256,bytes32,bytes32)",
          "args": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI",
            "riskProfileCode": "1"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DAI"
          },
          "expectedValue": {
            "adapterName": "HarvestV1Adapter",
            "token": "DAI"
          }
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "liquidityPools": [
              {
                "adapterName": "CompoundAdapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV1Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV2Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "HarvestV1Adapter",
                "token": "DAI"
              }
            ]
          }
        }
      ]
    },
    {
      "description": "getBestStrategy should return the best default strategy (even if it is Compound) and not the one returned by the APR oracle (although it can be the same)",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 0
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "CompoundAdapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV1Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "adapterName": "AaveV2Adapter",
            "token": "DAI"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(uint256,bytes32,bytes32)",
          "args": {
            "adapterName": "CompoundAdapter",
            "token": "DAI",
            "riskProfileCode": "1"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(uint256,address[])",
          "args": {
            "riskProfileCode": "1",
            "token": "DAI"
          },
          "expectedValue": {
            "adapterName": "CompoundAdapter",
            "token": "DAI"
          }
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "liquidityPools": [
              {
                "adapterName": "CompoundAdapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV1Adapter",
                "token": "DAI"
              },
              {
                "adapterName": "AaveV2Adapter",
                "token": "DAI"
              }
            ]
          }
        }
      ]
    },
    {
      "description": "User that is not strategyOperator shouldn't be able to set the default strategy state",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 0
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "User that is strategyOperator should be able to set the default strategy state",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 0
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [],
      "cleanActions": []
    }
  ]
}
